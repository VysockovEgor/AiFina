import base64
import json
import re
import time
import telebot
import mimetypes
from extractive_summarization import text_to_pdf
from telebot import types
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import parsing
import textSpeach
from sqlalchemy.orm import sessionmaker
from sqlalchemy import create_engine
from Recommender import BookRecommender
from liderbord import *
import asyncio
import requests
from OpenAI_Connected import generate
from keys import BOT_KEY
bot = telebot.TeleBot(BOT_KEY)

recommender = BookRecommender()
images = {}
AllStages = {}
UsersOuts = {}
Books = {}
AllSearchInfo = {}
engine = create_engine("sqlite:///chat_history.db")
SessionLocal = sessionmaker(bind=engine)
BASE_URL = "http://127.0.0.1:8000"

def button_back(b2=None):
    markBack = types.ReplyKeyboardMarkup(resize_keyboard=True)
    if b2 is not None:
        for i in b2:
            markBack.add(i)

    btn1 = types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö")
    markBack.add(btn1)
    return markBack

async def print_text(response, chat_id, markup, type_res, stage_now):
    if response.status_code == 200:
        m = None
        m1 = bot.send_message(chat_id, f"–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è, –æ–∂–∏–¥–∞–π—Ç–µ")
        m2 = bot.send_message(chat_id, "‚åõ")
        text_for_pdf = ''
        if stage_now == 'BookReq':
            words, rang, users = get_user_rating('@'+bot.get_chat_member(chat_id, chat_id).user.username)
            mes = ('<a href="http://127.0.0.1:8000">LiderBord\n</a>'+generate(
                f"–ü—Ä–µ–¥—Å—Ç–∞–≤—å —Å–µ–±—è –≤ —Ä–æ–ª–∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≥–µ—Ä–æ—è –∫–Ω–∏–≥–∏ <b>{Books[chat_id][0]}</b>. –ù–∞–ø–∏—à–∏ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏ —Å–ª–æ–≤–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ—á–∏—Ç–∞–ª —É–∂–µ <b>{words}</b> —Å–ª–æ–≤. –£–∫–∞–∂–∏, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ <b>{rang}</b> –º–µ—Å—Ç–µ —Å—Ä–µ–¥–∏ <b>{users}</b> —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –°–æ—Ö—Ä–∞–Ω–∏ —Å—Ç–∏–ª—å, —Ç–æ–Ω –∏ –º–∞–Ω–µ—Ä—É —Ä–µ—á–∏ —ç—Ç–æ–≥–æ –≥–µ—Ä–æ—è. –í—Å—Ç–∞–≤—å —ç–º–æ–¥–∑–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —ç—Ç–æ–º—É –ø–µ—Ä—Å–æ–Ω–∞–∂—É, —á—Ç–æ–±—ã –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –µ–≥–æ —Ö–∞—Ä–∞–∫—Ç–µ—Ä. –ó–∞–≤–µ—Ä—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—å—é, —É–∫–∞–∑—ã–≤–∞—é—â–µ–π, —á—Ç–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ö–æ–¥–∏—Ç –æ—Ç –∏–º–µ–Ω–∏ –¥–∞–Ω–Ω–æ–≥–æ –≥–µ—Ä–æ—è –ò –≤—ã–¥–µ–ª–∏ —á–∏—Å–ª–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –º–µ—Ç–∫–æ–π <b></b>. "))
            bot.send_message(chat_id, f"<blockquote>{mes}</blockquote>", parse_mode='HTML', reply_markup=markup)
        for line in response.iter_lines(decode_unicode=True):
            if line.strip():
                if AllStages[int(chat_id)][-1] != stage_now: return
                data = json.loads(line)
                if m1 is not None:
                    bot.delete_message(chat_id, m1.message_id)
                    bot.delete_message(chat_id, m2.message_id)
                    m1=None
                if data.get("summary"):
                    update_words_read('@'+bot.get_chat_member(chat_id, chat_id).user.username, len(data.get("summary").split()))
                    if type_res=='text':
                        bot.send_message(chat_id, data.get("summary"), reply_markup=markup)
                    elif type_res=='audio':
                        bot.send_audio(chat_id, textSpeach.get_speech(data.get("summary")),
                                       reply_markup=markup,
                                       title='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
                    elif type_res=='pdf':
                        text_for_pdf+=data.get("summary")
                        if data.get("last"):
                            bot.send_document(chat_id, text_to_pdf(text_for_pdf), visible_file_name='–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ' + '.pdf',
                                              reply_markup=markup)

                if data.get("last") and m is None:
                    with open('p.gif', 'rb') as f:
                        m = bot.send_animation(chat_id, f)
                if data.get("image"):
                    print(data.get("image"))
                    bot.edit_message_media(chat_id=chat_id, message_id=m.message_id,
                                           media=types.InputMediaPhoto(base64.b64decode(data.get("image"))))

    else:
        print("–û—à–∏–±–∫–∞:", response.status_code, response.text)

@bot.message_handler(commands=['start'])
def start(message):
    global AllStages, UsersOuts, images
    images[message.chat.id] = None
    if message.chat.id not in UsersOuts:
        requests.post(f"{BASE_URL}/settings/", json={'promt': [str(message.chat.id), '']})
        UsersOuts[message.chat.id] = 'Text'
    AllStages[message.chat.id] = [None, 'StartMenu']
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=1)
    btn0 = types.KeyboardButton("‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öô")  # new
    btn1 = types.KeyboardButton("üìñ–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏üìñ")
    btn2 = types.KeyboardButton("üìÇ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ªüìÇ")
    btn3 = types.KeyboardButton("‚úç–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º‚úç")
    markup.add(btn1, btn2, btn3, btn0)  # new
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}. \n –Ø –±–æ—Ç-–ø–æ–º–æ—à–Ω–∏–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–æ–ª—å—à–∏–º –æ–±—ä–µ–º–æ–º —Ç–µ–∫—Å—Ç–∞. –Ø –º–æ–≥—É —Å–∂–∞—Ç—å –∫–Ω–∏–≥—É –∏–ª–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç!',
                     reply_markup=markup)

def escape_markdown_v2(text):
    # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –¥–ª—è MarkdownV2, –∫—Ä–æ–º–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–π —á–µ—Ä—Ç—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫–∏
    special_chars = r"([\\*_\[\]()~`>#+\-=.!])"
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
    escaped_text = re.sub(special_chars, r'\\\1', text)
    # –ó–∞–º–µ–Ω—è–µ–º –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
    escaped_text = escaped_text.replace('"', '\\"')
    return escaped_text
@bot.message_handler(content_types=['text'])
def echo_message(message):
    global AllStages, AllSearchInfo

    if AllStages[message.chat.id][-1] == 'StartMenu':
        AllStages[message.chat.id][0] = 'StartMenu'
        if message.text == '‚öô–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öô':  # new
            AllStages[message.chat.id][-1] = 'Settings'  # new
            btn0 = types.KeyboardButton("üìù–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—èüìù")  # new
            btn1 = types.KeyboardButton("üì§–¢–∏–ø –≤—ã–≤–æ–¥–∞üì§")  # new
            bot.send_message(message.chat.id, '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?',
                             reply_markup=button_back().add(btn0, btn1))  # new
        elif message.text == 'üìñ–í–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏üìñ':
            AllStages[message.chat.id][-1] = 'BookReq'
            bot.send_message(message.chat.id,
                             '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–∏–≥–∏!\n–ï—Å–ª–∏ –Ω–µ –ø–æ–º–Ω–∏—Ç–µ, –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å —á–∞—Å—Ç—å, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –Ω–∞–π—Ç–∏!',
                             reply_markup=button_back())
        elif message.text == 'üìÇ–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ªüìÇ':
            AllStages[message.chat.id][-1] = 'FileReq'
            bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∂–∞—Ç—å‚úç", reply_markup=button_back())
            # bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—Ç–µ —Å–≤–æ–π —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx –∏–ª–∏ .txtüìÇ", reply_markup=button_back())
        elif message.text == '‚úç–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ–º‚úç':
            AllStages[message.chat.id][-1] = 'TextReq'
            bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Å–∂–∞—Ç—å‚úç", reply_markup=button_back())
            # bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç‚úç", reply_markup=button_back())

    elif AllStages[message.chat.id][-1] == 'Settings':  # new
        if message.text == '‚¨Ö–ù–∞–∑–∞–¥‚¨Ö':
            AllStages[message.chat.id][-1] = 'StartMenu'
            AllStages[message.chat.id][0] = 'Settings'
            start(message)
        elif message.text == 'üìù–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—èüìù':
            bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—è:', reply_markup=button_back())
            AllStages[message.chat.id][-1] = 'ExpParamT'
            AllStages[message.chat.id][0] = 'Settings'
        elif message.text == 'üì§–¢–∏–ø –≤—ã–≤–æ–¥–∞üì§':
            btn0 = types.KeyboardButton("üìù–¢–µ–∫—Å—Ç–æ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏üìù")  # new
            btn1 = types.KeyboardButton("üìÅPDF —Ñ–∞–π–ª–æ–ºüìÅ")
            btn2 = types.KeyboardButton("üîà–ì–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–ºüîà")
            bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤—ã–≤–æ–¥–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞:',
                             reply_markup=button_back().add(btn0, btn1, btn2))
            AllStages[message.chat.id][-1] = 'OutParamT'
            AllStages[message.chat.id][0] = 'Settings'

    elif AllStages[message.chat.id][-1] == 'BookReq':
        if message.text == '‚¨Ö–ù–∞–∑–∞–¥‚¨Ö':
            AllStages[message.chat.id][0] = 'BookReq'
            AllStages[message.chat.id][-1] = 'StartMenu'
            start(message)
        elif message.text == 'üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ':
            AllStages[message.chat.id][0] = 'BookReq'
            AllStages[message.chat.id][-1] = 'Discus'
            bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–¥–∞—Ç—å?', reply_markup=button_back())
        elif message.text == 'üìñ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ':
            AllStages[message.chat.id][0] = 'BookReq'
            AllStages[message.chat.id][-1] = 'Test'
            response = requests.post(f"{BASE_URL}/test/", json={'id': str(message.chat.id)})
            data = response.json()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            text = data['questions_and_answers']
            bot.send_message(message.chat.id, text, parse_mode="HTML", reply_markup=button_back().add(types.KeyboardButton("üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")))

        elif '–ì–ª–∞–≤–∞' in message.text:
            page_number = int(message.text.replace('–ì–ª–∞–≤–∞ ', ''))
            tmp = Books[message.chat.id]
            tmp[2] = page_number
            callback_query(None, tmp)
        else:
            AllSearch = parsing.SearchProduct(message.text)
            if len(AllSearch) == 0:
                books = recommender.recommend_books(message.text)
                if books is not None:
                    for i in books:
                        name = i.split(';)')[0]
                        url = i.split(';)')[1]
                        AllSearch[name] = url
                    markupMessage = InlineKeyboardMarkup()
                    AllSearchInfo[message.chat.id] = {}
                    for key in AllSearch.keys():
                        AllSearchInfo[message.chat.id][key[:min(25, len(key))]] = [key, AllSearch[key], 1,
                                                                                   message.chat.id]
                        markupMessage.add(
                            InlineKeyboardButton(text=key, callback_data=key[:min(25, len(key))] + "%" + str(
                                message.chat.id)))
                    bot.send_message(message.chat.id, '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É?', reply_markup=markupMessage)
                else:
                    bot.send_message(message.chat.id, '–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ:(')
            else:
                markupMessage = InlineKeyboardMarkup()
                AllSearchInfo[message.chat.id] = {}
                for key in AllSearch.keys():
                    AllSearchInfo[message.chat.id][key[:min(25, len(key))]] = [key, AllSearch[key], 1, message.chat.id]
                    markupMessage.add(InlineKeyboardButton(text=key, callback_data=key[:min(25, len(key))] + "%" + str(
                        message.chat.id)))
                bot.send_message(message.chat.id, '–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –≤—ã –∏–º–µ–ª–∏ –≤–≤–∏–¥—É?', reply_markup=markupMessage)
    elif AllStages[message.chat.id][-1] == 'FileReq':
        if message.text == '‚¨Ö–ù–∞–∑–∞–¥‚¨Ö':
            AllStages[message.chat.id][0] = 'FileReq'
            AllStages[message.chat.id][-1] = 'StartMenu'
            start(message)
        elif message.text == 'üìñ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ':
            AllStages[message.chat.id][0] = 'BookReq'
            AllStages[message.chat.id][-1] = 'Test'
            response = requests.post(f"{BASE_URL}/test/", json={'id': str(message.chat.id)})
            data = response.json()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            text = data['questions_and_answers']
            bot.send_message(message.chat.id, text, parse_mode="HTML",
                             reply_markup=button_back().add(types.KeyboardButton("üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")))
    elif message.text == 'üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ':
            AllStages[message.chat.id][0] = 'FileReq'
            AllStages[message.chat.id][-1] = 'Discus'
            bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–¥–∞—Ç—å?', reply_markup=button_back())
    elif AllStages[message.chat.id][-1] == 'TextReq':
        if message.text == '‚¨Ö–ù–∞–∑–∞–¥‚¨Ö':
            AllStages[message.chat.id][0] = 'TextReq'
            AllStages[message.chat.id][-1] = 'StartMenu'
            start(message)
        elif message.text == 'üìñ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ':
            AllStages[message.chat.id][0] = 'BookReq'
            AllStages[message.chat.id][-1] = 'Test'
            response = requests.post(f"{BASE_URL}/test/", json={'id': str(message.chat.id)})
            data = response.json()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            text = data['questions_and_answers']
            bot.send_message(message.chat.id, text, parse_mode="HTML",
                             reply_markup=button_back().add(types.KeyboardButton("üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")))


        elif message.text == 'üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ':
            AllStages[message.chat.id][0] = 'TextReq'
            AllStages[message.chat.id][-1] = 'Discus'
            bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–¥–∞—Ç—å?', reply_markup=button_back())
        else:
            chat_id = message.chat.id
            response = requests.post(f"{BASE_URL}/text/", json={'text':message.text, 'id':str(chat_id)}, stream=True)
            buttons = button_back().add(types.KeyboardButton("üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")).add(types.KeyboardButton("üìñ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ"))
            if UsersOuts[message.chat.id] == 'Text':
                asyncio.run(print_text(response, chat_id, buttons,
                           'text', 'TextReq'))
            elif UsersOuts[message.chat.id] == 'Voice':
                asyncio.run(print_text(response, chat_id, buttons,
                           'audio', 'TextReq'))
            elif UsersOuts[message.chat.id] == 'File':
                asyncio.run(print_text(response, chat_id, buttons,
                           'pdf', 'TextReq'))


    elif AllStages[message.chat.id][-1] == 'Discus':
        if message.text == '‚¨Ö–ù–∞–∑–∞–¥‚¨Ö':
            AllStages[message.chat.id][0] = 'Discus'
            AllStages[message.chat.id][-1] = 'StartMenu'
            start(message)
        elif message.text == 'üìñ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ':
            AllStages[message.chat.id][0] = 'Discus'
            AllStages[message.chat.id][-1] = 'Test'
            response = requests.post(f"{BASE_URL}/test/", json={'id': str(message.chat.id)})
            data = response.json()  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–≤–µ—Ç –≤ —Å–ª–æ–≤–∞—Ä—å
            text = data['questions_and_answers']
            bot.send_message(message.chat.id, text, parse_mode="HTML",
                             reply_markup=button_back().add(types.KeyboardButton("üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")))


        else:
            res = requests.post(f"{BASE_URL}/answer/", json={'question':str(message.text), 'id':str(message.chat.id)})
            data = res.json()
            bot.send_message(message.chat.id,data['a'],
                             reply_markup=button_back().add(
                types.KeyboardButton("üìñ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")))
    elif AllStages[message.chat.id][-1] == 'Test':
        if message.text == '‚¨Ö–ù–∞–∑–∞–¥‚¨Ö':
            AllStages[message.chat.id][0] = 'Test'
            AllStages[message.chat.id][-1] = 'StartMenu'
            start(message)
        elif message.text == 'üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ':
            AllStages[message.chat.id][0] = 'Test'
            AllStages[message.chat.id][-1] = 'Discus'
            bot.send_message(message.chat.id, '–ö–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –∑–∞–¥–∞—Ç—å?', reply_markup=button_back())


    elif AllStages[message.chat.id][-1] == 'ExpParamT':  # new
        if message.text == '‚¨Ö–ù–∞–∑–∞–¥‚¨Ö':
            AllStages[message.chat.id][-1] = 'StartMenu'
            AllStages[message.chat.id][-1] = 'ExpParamT'
            start(message)
        else:
            requests.post(f"{BASE_URL}/settings/", json={'promt': [str(message.chat.id), message.text]})
            AllStages[message.chat.id][-1] = 'Settings'  # new
            AllStages[message.chat.id][0] = 'ExpParamT'
            btn0 = types.KeyboardButton("üìù–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—èüìù")  # new
            btn1 = types.KeyboardButton("üì§–¢–∏–ø –≤—ã–≤–æ–¥–∞üì§")  # new
            bot.send_message(message.chat.id, '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!')
            bot.send_message(message.chat.id, '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?',
                             reply_markup=button_back().add(btn0, btn1))  # new
    elif AllStages[message.chat.id][-1] == 'OutParamT':  # new
        if message.text == '‚¨Ö–ù–∞–∑–∞–¥‚¨Ö':
            AllStages[message.chat.id][-1] = 'StartMenu'
            AllStages[message.chat.id][0] = 'OutParamT'
            start(message)
        elif message.text == "üìù–¢–µ–∫—Å—Ç–æ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏üìù":
            UsersOuts[message.chat.id] = 'Text'
            AllStages[message.chat.id][-1] = 'Settings'  # new
            AllStages[message.chat.id][0] = 'OutParamT'
            btn0 = types.KeyboardButton("üìù–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—èüìù")  # new
            btn1 = types.KeyboardButton("üì§–¢–∏–ø –≤—ã–≤–æ–¥–∞üì§")  # new
            bot.send_message(message.chat.id, '–¢–∏–ø –≤—ã–≤–æ–¥–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
            bot.send_message(message.chat.id, '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?',
                             reply_markup=button_back().add(btn0, btn1))  # new
        elif message.text == 'üìÅPDF —Ñ–∞–π–ª–æ–ºüìÅ':
            UsersOuts[message.chat.id] = 'File'
            AllStages[message.chat.id][-1] = 'Settings'  # new
            AllStages[message.chat.id][0] = 'OutParamT'
            btn0 = types.KeyboardButton("üìù–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—èüìù")  # new
            btn1 = types.KeyboardButton("üì§–¢–∏–ø –≤—ã–≤–æ–¥–∞üì§")  # new
            bot.send_message(message.chat.id, '–¢–∏–ø –≤—ã–≤–æ–¥–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
            bot.send_message(message.chat.id, '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?',
                             reply_markup=button_back().add(btn0, btn1))  # new
        elif message.text == 'üîà–ì–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–ºüîà':
            UsersOuts[message.chat.id] = 'Voice'
            AllStages[message.chat.id][-1] = 'Settings'  # new
            AllStages[message.chat.id][0] = 'OutParamT'
            btn0 = types.KeyboardButton("üìù–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—èüìù")  # new
            btn1 = types.KeyboardButton("üì§–¢–∏–ø –≤—ã–≤–æ–¥–∞üì§")  # new
            bot.send_message(message.chat.id, '–¢–∏–ø –≤—ã–≤–æ–¥–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞ —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
            bot.send_message(message.chat.id, '–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å?',
                             reply_markup=button_back().add(btn0, btn1))  # new
        else:
            btn0 = types.KeyboardButton("üìù–¢–µ–∫—Å—Ç–æ–º –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏üìù")  # new
            btn1 = types.KeyboardButton("üìÅPDF —Ñ–∞–π–ª–æ–ºüìÅ")
            btn2 = types.KeyboardButton("üîà–ì–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–ºüîà")
            bot.send_message(message.chat.id, "–¢–∞–∫–æ–≥–æ —Ç–∏–ø–∞ –≤—ã–≤–æ–¥–∞ —É –Ω–∞—Å –Ω–µ—Ç :(",
                             reply_markup=button_back().add(btn0, btn1, btn2))


@bot.message_handler(content_types=['document'])
def get_file(message):
    global AllStages, images
    if AllStages[message.chat.id][-1] == 'FileReq':
        chat_id = message.chat.id

        if AllStages[int(chat_id)][-1] != 'FileReq': return
        file_info = bot.get_file(message.document.file_id)
        file_name = message.document.file_name
        mime_type, _ = mimetypes.guess_type(file_name)
        if mime_type in ['application/vnd.openxmlformats-officedocument.wordprocessingml.document', 'text/plain']:
            f = bot.download_file(file_info.file_path)
            response = requests.post(f"{BASE_URL}/file/", files={"file": f}, data={'id':str(chat_id)}, stream=True)
            buttons = button_back().add(types.KeyboardButton("üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")).add(
                types.KeyboardButton("üìñ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ"))
            if UsersOuts[message.chat.id] == 'Text':
                asyncio.run(print_text(response, chat_id, buttons,
                           'text', 'FileReq'))
            elif UsersOuts[message.chat.id] == 'Voice':
                asyncio.run(print_text(response, chat_id, buttons,
                           'audio', 'FileReq'))
            elif UsersOuts[message.chat.id] == 'File':
                asyncio.run(print_text(response, chat_id, buttons,
                           'pdf', 'FileReq'))
        else:
            bot.send_message(message.chat.id,
                             "–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ .docx –∏–ª–∏ .txt.")


@bot.callback_query_handler(func=lambda call: True)  # —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–Ω–æ–ø–æ–∫
def callback_query(call, ChoiceS=None):
    global AllStages, Books, AllSearchInfo
    try:
        if ChoiceS:
            ChoiceSearch = ChoiceS
            chat_id = int(ChoiceS[3])
        else:
            key_of_search, chat_id = call.data.split('%')
            chat_id = int(chat_id)
            ChoiceSearch = AllSearchInfo[chat_id][key_of_search]
        Books[int(ChoiceSearch[3])] = ChoiceSearch

        path_to_text = parsing.ParsingProductText(ChoiceSearch)
        with open(path_to_text, 'r', encoding='utf-8') as file:
            textBook = json.load(file)
            # print(textBook)
        txt = textBook['chapterText' + str(ChoiceSearch[2])]
        response = requests.post(f"{BASE_URL}/text/", json={'text': txt, 'id': str(chat_id)}, stream=True)
        if AllStages[int(ChoiceSearch[3])][-1] != 'BookReq': return
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        if ChoiceSearch[2] == 1:
            markup.row(types.KeyboardButton(f'–ì–ª–∞–≤–∞ {ChoiceSearch[2] + 1}')).row(
                types.KeyboardButton("üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")).row(types.KeyboardButton("üìñ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")).row(types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö"))
        elif ChoiceSearch[2] == textBook['count_all_pages']:
            markup.row(types.KeyboardButton(f'–ì–ª–∞–≤–∞ {ChoiceSearch[2] - 1}')).row(
                types.KeyboardButton("üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")).row(types.KeyboardButton("üìñ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")).row(types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö"))
        else:
            markup.row(types.KeyboardButton(f'–ì–ª–∞–≤–∞ {ChoiceSearch[2] - 1}'),
                       types.KeyboardButton(f'–ì–ª–∞–≤–∞ {ChoiceSearch[2] + 1}')).row(
                types.KeyboardButton("üìñ–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ"),types.KeyboardButton("üìñ–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ —Ç–µ–∫—Å—Ç—Éüìñ")).row(types.KeyboardButton("‚¨Ö–ù–∞–∑–∞–¥‚¨Ö"))


        if UsersOuts[chat_id] == 'Text':
            asyncio.run(print_text(response, chat_id, markup,
                       'text', 'BookReq'))
        elif UsersOuts[chat_id] == 'Voice':
            asyncio.run(print_text(response, chat_id, markup,
                       'audio', 'BookReq'))
        elif UsersOuts[chat_id] == 'File':
            asyncio.run(print_text(response, chat_id, markup,
                       'pdf', 'BookReq'))

    except ZeroDivisionError:  # Exception as e:
        # print(e)
        pass


while True:
    try:
        bot.polling(none_stop=True)
    except Exception as e:
        print(e)
        time.sleep(5)
